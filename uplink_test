import socket
from telnetlib import Telnet
import base64, pickle
from twisted.internet import reactor, protocol, task
from autobahn.twisted.websocket import WebSocketClientProtocol
from twisted.python import log
from twisted.internet.task import LoopingCall,deferLater
from autobahn.twisted.websocket import WebSocketClientFactory
import sys
import json
import uuid

class Data:
    def __init__(self):
        self.my_data = open("lieber_dump.txt","r").readlines()
	self.i = 0
    def write(self):
	i %= len(self.my_data)
	this_data = self.my_data[i]
	dec = base64.b64decode(this_data)
	return dec
d=Data()
class ClientProtocol(WebSocketClientProtocol):
    def onOpen(self):
	print("open")
        self.sendMessage('[{"proto":{"identity":"'+str(uuid.uuid1())+'","type":"lieber"}}]')
        #LoopingCall(send).start(0.01)
    def onConnect(self, response):
        print "Server Connected: {0}:".format(response.peer)
    def send():
        self.sendMessage(d.write())

print "working"
factory = WebSocketClientFactory(u"ws://www.csuiteexperiment.com:9002")
factory.protocol = ClientProtocol
reactor.connectTCP("www.csuiteexperiment.com", 9002, factory)
print "run"
reactor.run()
